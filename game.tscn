[gd_scene load_steps=22 format=3 uid="uid://da88vf2c6p1mj"]

[ext_resource type="PackedScene" uid="uid://d0gvu85ohf6wu" path="res://controls.tscn" id="1_7juxt"]
[ext_resource type="Script" path="res://game.gd" id="1_lk7v8"]
[ext_resource type="Shader" path="res://juice/mist.gdshader" id="2_07dmt"]
[ext_resource type="PackedScene" uid="uid://wuyu6j0dw6bl" path="res://flyman.tscn" id="2_oe86f"]
[ext_resource type="PackedScene" uid="uid://dtl7yjdhrgv0k" path="res://Scene/main_score_overlay.tscn" id="2_qt2yf"]
[ext_resource type="Shader" path="res://juice/grad.gdshader" id="3_f215n"]
[ext_resource type="Texture2D" uid="uid://dytfoolfwn5v0" path="res://Art/sprites/path.png" id="6_iuxaw"]
[ext_resource type="Shader" path="res://juice/camo.gdshader" id="7_dpep2"]
[ext_resource type="Texture2D" uid="uid://bvepwl0t0umwb" path="res://Art/sprites/MicrosoftTeams-image (15).png" id="7_ehf2k"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_m7fca"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_4b5ff"]
seamless = true
seamless_blend_skirt = 1.0
noise = SubResource("FastNoiseLite_m7fca")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v0uc6"]
shader = ExtResource("2_07dmt")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_4b5ff")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nr1sg"]
shader = ExtResource("3_f215n")

[sub_resource type="Shader" id="Shader_focb6"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_csn1m"]
shader = SubResource("Shader_focb6")
shader_parameter/overlay = true
shader_parameter/scanlines_opacity = 0.193
shader_parameter/scanlines_width = 0.274
shader_parameter/grille_opacity = 0.185
shader_parameter/resolution = Vector2(512, 512)
shader_parameter/pixelate = true
shader_parameter/roll = false
shader_parameter/roll_speed = 0.0
shader_parameter/roll_size = 0.0
shader_parameter/roll_variation = 0.1
shader_parameter/distort_intensity = 0.026
shader_parameter/noise_opacity = 0.362
shader_parameter/noise_speed = 1.0
shader_parameter/static_noise_intensity = 0.022
shader_parameter/aberration = 0.01
shader_parameter/brightness = 1.4
shader_parameter/discolor = false
shader_parameter/warp_amount = 0.567
shader_parameter/clip_warp = false
shader_parameter/vignette_intensity = 0.4
shader_parameter/vignette_opacity = 0.38

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_xyes6"]
emission_shape = 3
emission_box_extents = Vector3(700, 0, 1)
particle_flag_disable_z = true
direction = Vector3(0, 1, 0)
gravity = Vector3(0, 50, 0)
initial_velocity_min = 254.78
initial_velocity_max = 376.27
orbit_velocity_min = 0.0
orbit_velocity_max = 0.0
scale_min = 5.0
scale_max = 10.0
color = Color(0, 0, 0, 0.0784314)
turbulence_noise_strength = 0.75
turbulence_noise_scale = 0.51
turbulence_noise_speed = Vector3(0.5, 0, 0)
turbulence_influence_min = 0.01
turbulence_initial_displacement_min = -54.2
turbulence_initial_displacement_max = 19.7

[sub_resource type="Gradient" id="Gradient_iuxky"]
interpolation_mode = 1
offsets = PackedFloat32Array(0, 0.331325, 0.650602)
colors = PackedColorArray(7.21961e-07, 0.58622, 0.0824606, 1, 1, 0.656714, 0.835973, 1, 1, 0.976471, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_u8wnw"]
gradient = SubResource("Gradient_iuxky")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_y64dx"]
noise_type = 5
frequency = 0.139
fractal_type = 3
fractal_octaves = 7
fractal_lacunarity = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lxlw2"]
width = 256
height = 256
seamless = true
as_normal_map = true
bump_strength = 7.5
noise = SubResource("FastNoiseLite_y64dx")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qqmyj"]
shader = ExtResource("7_dpep2")
shader_parameter/lcd = 1.0
shader_parameter/colors = SubResource("GradientTexture2D_u8wnw")
shader_parameter/pattern = SubResource("NoiseTexture2D_lxlw2")

[node name="game" type="Node2D"]
script = ExtResource("1_lk7v8")

[node name="Main_Score" parent="." instance=ExtResource("2_qt2yf")]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="mist" type="ColorRect" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_v0uc6")
offset_right = 1920.0
offset_bottom = 1086.0
size_flags_horizontal = 4
mouse_filter = 2
color = Color(0.682353, 0.698039, 1, 1)

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_nr1sg")
offset_right = 1913.0
offset_bottom = 1077.0
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 2

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_csn1m")
offset_left = -10.0
offset_top = 1.0
offset_right = 1927.0
offset_bottom = 1085.0
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 2

[node name="GPUParticles2D" type="GPUParticles2D" parent="CanvasLayer"]
position = Vector2(951, -30)
amount = 300
process_material = SubResource("ParticleProcessMaterial_xyes6")
lifetime = 10.0

[node name="flyman" parent="." instance=ExtResource("2_oe86f")]
position = Vector2(504, 111)

[node name="Controls" parent="." instance=ExtResource("1_7juxt")]
position = Vector2(18, 4)

[node name="Sprite2D" type="Sprite2D" parent="."]
z_index = -1
texture = ExtResource("6_iuxaw")
centered = false

[node name="Cham" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_qqmyj")
position = Vector2(954, 980)
scale = Vector2(0.603615, 0.603615)
texture = ExtResource("7_ehf2k")
hframes = 3

[node name="shadow" type="Sprite2D" parent="Cham"]
modulate = Color(0, 0, 0, 0.407843)
z_index = -1
position = Vector2(-29.8204, -9.94006)
texture = ExtResource("7_ehf2k")
hframes = 3
